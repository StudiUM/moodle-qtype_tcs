{"version":3,"file":"tcs.min.js","sources":["../src/tcs.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tcs question form.\n *\n * @module     qtype_tcs/tcs\n * @copyright  2021 Université de Montréal\n * @author     Issam Taboubi <issam.taboubi@umontreal.ca>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery'],\n    function($) {\n\n        var SELECTORS = {\n            RADIOANSWER: \".answer input[type='radio']\",\n            TEXTAREAFEEDBACK: \".answerfeedback textarea\"\n        };\n\n        /**\n         * Constructor\n         *\n         * @param {String} outsidefieldcompetenceid\n         * @param {String} inputhidden\n         */\n        var TcsQuestion = function(outsidefieldcompetenceid, inputhidden) {\n\n            this.attachEventListeners(outsidefieldcompetenceid, inputhidden);\n        };\n\n        /**\n         * Private method\n         *\n         * @param {String} checkboxid\n         * @param {String} inputhidden\n         * @method attachEventListeners\n         * @private\n         */\n        TcsQuestion.prototype.attachEventListeners = function(checkboxid, inputhidden) {\n            $('input[id=\"' + checkboxid + '\"]').on('change', function() {\n                // Enable/disable answer and feedback.\n                var questionform = $(this).parent(\".tcs-container\");\n                var answers = questionform.find(SELECTORS.RADIOANSWER);\n                var feedback = questionform.find(SELECTORS.TEXTAREAFEEDBACK);\n                if ($(this).is(\":checked\")) {\n                    $('input[id=\"' + inputhidden + '\"]').val(1);\n                    answers.prop('disabled', true);\n                    feedback.prop('disabled', true);\n                } else {\n                    $('input[id=\"' + inputhidden + '\"]').val(0);\n                    answers.prop('disabled', false);\n                    feedback.prop('disabled', false);\n                }\n            });\n        };\n\n        return /** @alias module:qtype_tcs/tcs */ {\n            // Public variables and functions.\n\n            /**\n             * Initialise.\n             *\n             * @method init\n             * @param {String} outsidefieldcompetenceid\n             * @param {String} inputhidden\n             * @return {TcsQuestion}\n             */\n            'init': function(outsidefieldcompetenceid, inputhidden) {\n                return new TcsQuestion(outsidefieldcompetenceid, inputhidden);\n            }\n        };\n    });\n"],"names":["define","$","SELECTORS","TcsQuestion","outsidefieldcompetenceid","inputhidden","attachEventListeners","prototype","checkboxid","on","questionform","this","parent","answers","find","feedback","is","val","prop"],"mappings":";;;;;;;;AAuBAA,uBAAO,CAAC,WACJ,SAASC,OAEDC,sBACa,8BADbA,2BAEkB,2BASlBC,YAAc,SAASC,yBAA0BC,kBAE5CC,qBAAqBF,yBAA0BC,qBAWxDF,YAAYI,UAAUD,qBAAuB,SAASE,WAAYH,aAC9DJ,EAAE,aAAeO,WAAa,MAAMC,GAAG,UAAU,eAEzCC,aAAeT,EAAEU,MAAMC,OAAO,kBAC9BC,QAAUH,aAAaI,KAAKZ,uBAC5Ba,SAAWL,aAAaI,KAAKZ,4BAC7BD,EAAEU,MAAMK,GAAG,aACXf,EAAE,aAAeI,YAAc,MAAMY,IAAI,GACzCJ,QAAQK,KAAK,YAAY,GACzBH,SAASG,KAAK,YAAY,KAE1BjB,EAAE,aAAeI,YAAc,MAAMY,IAAI,GACzCJ,QAAQK,KAAK,YAAY,GACzBH,SAASG,KAAK,YAAY,QAKI,MAW9B,SAASd,yBAA0BC,oBAChC,IAAIF,YAAYC,yBAA0BC"}